
AVRASM ver. 2.2.7  C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\main.asm Wed Jun 02 02:01:41 2021

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m8adef.inc'
C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\main.asm(1): Including file 'C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\Defines.inc'
C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\main.asm(2): Including file 'C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\Macro.inc'
C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\main.asm(3): Including file 'C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\Display.inc'
C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\main.asm(4): Including file 'C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\Encoder.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m8adef.inc'
C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\main.asm(1): Including file 'C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\Defines.inc'
C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\main.asm(2): Including file 'C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\Macro.inc'
C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\main.asm(3): Including file 'C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\Display.inc'
C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\main.asm(4): Including file 'C:\Users\steam\Documents\Atmel Studio\7.0\AssemblerApplication4\AssemblerApplication4\Encoder.inc'
                                 
                                 	.include "Defines.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8A.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8ADEF_INC_
                                 #define _M8ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega8A
                                 #pragma AVRPART ADMIN PART_NAME ATmega8A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x93
                                 .equ	SIGNATURE_002	= 0x07
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCL	= 0x04
                                 .equ	ADCH	= 0x05
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 
                                 ; TCCR0 - Timer/Counter0 Control Register
                                 .equ	CS00	= 0	; Clock Select0 bit 0
                                 .equ	CS01	= 1	; Clock Select0 bit 1
                                 .equ	CS02	= 2	; Clock Select0 bit 2
                                 
                                 ; TCNT0 - Timer Counter 0
                                 .equ	TCNT00	= 0	; Timer Counter 0 bit 0
                                 .equ	TCNT01	= 1	; Timer Counter 0 bit 1
                                 .equ	TCNT02	= 2	; Timer Counter 0 bit 2
                                 .equ	TCNT03	= 3	; Timer Counter 0 bit 3
                                 .equ	TCNT04	= 4	; Timer Counter 0 bit 4
                                 .equ	TCNT05	= 5	; Timer Counter 0 bit 5
                                 .equ	TCNT06	= 6	; Timer Counter 0 bit 6
                                 .equ	TCNT07	= 7	; Timer Counter 0 bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PUD	= 2	; Pull-up Disable
                                 .equ	ADHSM	= 4	; ADC High Speed Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	WTDON	= 6	; Enable watchdog
                                 .equ	RSTDISBL	= 7	; Disable reset
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 8192
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xc00
                                 .equ	NRWW_STOP_ADDR	= 0xfff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xbff
                                 .equ	PAGESIZE	= 32
                                 .equ	FIRSTBOOTSTART	= 0xf80
                                 .equ	SECONDBOOTSTART	= 0xf00
                                 .equ	THIRDBOOTSTART	= 0xe00
                                 .equ	FOURTHBOOTSTART	= 0xc00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0003	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0004	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0009	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x000a	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x000b	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x000c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x000d	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x000e	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0010	; Analog Comparator
                                 .equ	TWIaddr	= 0x0011	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0012	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                                 
                                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                                 
                                 #endif  /* _M8ADEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 	;0b-DispRefresh
                                 	;1b-TurnLeft
                                 	;2b-TurnRighr
                                 	;3b-ButtonClick
                                 	;4b-d1First
                                 	;5b-d2First
                                 	;6b-ButtonWasOn
                                 
                                 	.def SysReg1=r22
                                 	.def SysReg2=r23
                                 	.def SysReg3=r24
                                 	.def SysReg4=r25
                                 	.def CurrentWindow=r20
                                 	.def Status=r21	
                                 	.def dispDataReg=r19
                                 
                                 
                                 	.equ DispRefreshTime=300;ms
                                 	.equ ButtonWaitTime=100;ms
                                 	.equ DispPort=PORTC
                                 	.equ WatPort=PORTD
                                 	.equ WatPin=PinD
                                 	.include "Macro.inc"
                                 
                                 
                                 .macro RamErase
                                 	clr SysReg1
                                 	clr SysReg2
                                 	clr SysReg3
                                 	clr SysReg4
                                 	clr CurrentWindow
                                 	clr Status
                                 	clr dispDataReg
                                 
                                 	ldi ZL,low(SRAM_START)
                                 	ldi ZH,high(SRAM_START)
                                 
                                 raminit:
                                 	ldi SysReg1,0x00
                                 	st Z+,SysReg1
                                 	ldi SysReg1,low(RAMEND)
                                 	cp ZL,SysReg1
                                 	brne raminit
                                 	ldi SysReg1,high(RAMEND)
                                 	cp ZH,SysReg1
                                 	brne raminit
                                 .endm
                                 
                                 
                                 .macro delay5
                                 	push SysReg1
                                 	push SysReg2
                                 	push SysReg3
                                 
                                 
                                 	ldi SysReg1,low(@0)
                                 	ldi SysReg2,high(@0)
                                 	ldi SysReg3,byte3(@0)
                                 
                                  w1:
                                 	subi SysReg1,1
                                 	sbci SysReg2,0
                                 	sbci SysReg3,0
                                 	brcc w1  
                                 
                                 	pop SysReg3
                                 	pop SysReg2
                                 	pop SysReg1
                                 .endm
                                 
                                 
                                 
                                 
                                 
                                 .macro StackSet
                                     ldi SysReg1,low(RAMEND)
                                 	out SPL,SysReg1
                                 	ldi SysReg1,high(RAMEND)
                                 	out SPH,SysReg1
                                 .endm
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 .macro outi 
                                 	push SysReg1
                                 	ldi SysReg1,@1
                                 	out @0,SysReg1
                                 	pop SysReg1
                                 .endm
                                 
                                 
                                 
                                 
                                 
                                 
                                 .macro mldi
                                 	ldi SysReg1,@1
                                 	mov @0,SysReg1
                                 .endm
                                 
                                 
                                 
                                 
                                 
                                 
                                 .macro stsi
                                 ldi SysReg1,@1
                                 sts @0,SysReg1
                                 .endm
                                 
                                 
                                 
                                 
                                 .macro inc2bVar
                                 	push SysReg1
                                 	push SysReg2
                                 	push SysReg3
                                 	push SysReg4
                                 
                                 ;==========================================
                                 
                                 	clr SysReg1
                                 	ldi SysReg2,1
                                 
                                 	lds SysReg3,@0
                                 	lds SysReg4,@0+1
                                 
                                 	add SysReg3,SysReg2
                                 	adc SysReg4,SysReg1
                                 
                                 	sts @0,SysReg3
                                 	sts @0+1,SysReg4
                                 
                                 ;==========================================
                                 	pop SysReg4
                                 	pop SysReg3
                                 	pop SysReg2
                                 	pop SysReg1
                                 .endm
                                 
                                 
                                 
                                 
                                 .macro PortInit 
                                 	outi DDRC,$FF
                                 	outi DispPort,$00
                                 	outi DDRB,$00
                                 	outi PORTB,$FF
                                 	outi DDRD,$FF
                                 	outi WatPort,$00
                                 .endm
                                 
                                 
                                 
                                 	.include "Display.inc"
                                 
                                 	;0b-DispRefresh
                                 	;1b-TurnLeft
                                 	;2b-TurnRighr
                                 	;3b-ButtonClick
                                 	;4b-d1First
                                 	;5b-d2First
                                 	;6b-ButtonWasOn
                                 ;========================================================================================================================================================================
                                 
                                 .macro mDispSendData
                                 	push dispDataReg
                                 
                                 	ldi dispDataReg,@0
                                 	rcall DispSendData
                                 
                                 	pop dispDataReg
                                 .endm
                                 
                                 ;========================================================================================================================================================================
                                 
                                 .macro mDispSendComnd
                                 	push dispDataReg
                                 
                                 	ldi dispDataReg,@0
                                 	rcall DispSendComnd
                                 
                                 	pop dispDataReg
                                 .endm
                                 
                                 ;========================================================================================================================================================================
                                 
                                 .macro DispInit
                                 	ldi CurrentWindow,0
                                 
                                 	mDispSendComnd 0x02
                                 	mDispSendComnd 0x08
                                 	mDispSendComnd 0x0C
                                 	mDispSendComnd 0x06
                                 	mDispSendComnd 0x01
                                 	delay5 600
                                 .endm
                                 
                                 ;========================================================================================================================================================================
                                 
                                 .macro getWindowAddr 
                                 	lsl @0
                                 	clr SysReg1
                                 	ldi ZL,low(MenuList)
                                 	ldi ZH,high(MenuList)
                                 	lsl ZL
                                 	rol ZH
                                 	add ZL,@0
                                 	adc ZH,r17
                                 	lpm XL,Z+
                                 	nop
                                 	lpm XH,Z
                                 	nop
                                 
                                 
                                 	mov ZL,XL
                                 	mov ZH,XH
                                 .endm
                                 
                                 ;========================================================================================================================================================================
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 .macro displayCheck
                                 	push XL
                                 	push XH
                                 ;==========================================
                                 
                                 	lds XL,DWT
                                 	lds XH,DWT+1
                                 
                                 	cpi XL,low(DispRefreshTime*10/2)
                                 	brcs displayCheckEnd
                                 	cpi XH,high(DispRefreshTime*10/2)
                                 	brcs displayCheckEnd
                                 	
                                 	clr XL
                                 	sts DWT,XL
                                 	sts DWT+1,XL
                                 	ori Status,1
                                 	
                                 ;==========================================
                                 displayCheckEnd:
                                 	pop XH
                                 	pop XL
                                 
                                 .endm
                                 	.include "Encoder.inc"
                                 
                                 	outi TCCR0,1
                                 	outi SFIOR,1
                                 	outi TIMSK,1
                                 .endm
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 .macro EncoderCheck
                                 
                                 nop
                                 .endm
                                 
                                 
                                 
                                 
                                 
                                 .macro ButtonCheck
                                 	push XL
                                 	push XH
                                 ;==========================================
                                 	sbrs Status,3
                                 	rjmp ButtonCheckW1
                                 	lds XL,BWT
                                 	lds XH,BWT+1
                                 
                                 	cpi XL,low(ButtonWaitTime*10/2)
                                 	brcs ButtonCheckEnd
                                 	cpi XH,high(ButtonWaitTime*10/2)
                                 	brcs ButtonCheckEnd
                                 
                                 
                                 ButtonCheckW1:
                                 
                                 	
                                 ;==========================================
                                 ButtonCheckEnd:
                                 	pop XH
                                 	pop XL
                                 ;DATA SEG;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 	.dseg
                                 	.org SRAM_START
                                 
000060                           BWT: .byte 2
000062                           EWT: .byte 2
000064                           DWT: .byte 2
                                 
                                 ;CODE SEG;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ;Interupt====================================================================================================================================================================================
                                 	.cseg
                                 	.org 0x00
000000 c068                      	rjmp init
000001 9518                      	reti
000002 9518                      	reti
000003 9518                      	reti
000004 9518                      	reti
000005 9518                      	reti
000006 9518                      	reti
000007 9518                      	reti
000008 9518                      	reti
000009 c013                      	rjmp timer
00000a 9518                      	reti
00000b 9518                      	reti
00000c 9518                      	reti
00000d 9518                      	reti
00000e 9518                      	reti
00000f 9518                      	reti
000010 9518                      	reti
000011 9518                      	reti
000012 9518                      	reti
                                 
                                 ;InteruptHandler===============================================================================================================================================================================
                                 
000013 018f
000014 0210
000015 0219
000016 021a
000017 021b
000018 021c
000019 021d
00001a 021e
00001b 021f
00001c 0220                      MenuList:.dw ShowMainMenu,ShowSetMenu,ShowM0,ShowM1,ShowM2,ShowM3,ShowM4,ShowM5,ShowM6,ShowM7
                                 
                                 timer:
00001d 932f                      	push r18
00001e 936f                      	push SysReg1
                                 
00001f e425                      	ldi r18,0x45
000020 bf22                      	out TCNT0,r18
                                 	
000021 b72f                      	in r18,sreg
                                 	;======================	
                                 
000022 936f
000023 937f
000024 938f
000025 939f
000026 2766
000027 e071
000028 9180 0064
00002a 9190 0065
00002c 0f87
00002d 1f96
00002e 9380 0064
000030 9390 0065
000032 919f
000033 918f
000034 917f
000035 916f                      	inc2bVar DWT
000036 2f65                      	mov SysReg1,Status
000037 7360                      	andi SysReg1,0b00110000
000038 f0a1                      	breq TNext1
000039 936f
00003a 937f
00003b 938f
00003c 939f
00003d 2766
00003e e071
00003f 9180 0062
000041 9190 0063
000043 0f87
000044 1f96
000045 9380 0062
000047 9390 0063
000049 919f
00004a 918f
00004b 917f
00004c 916f                      	inc2bVar EWT
                                 TNext1:
00004d 2f65                      	mov SysReg1,Status
00004e 7460                      	andi SysReg1,0b01000000
00004f f0a9                      	breq TNext2
000050 fd55                      	sbrc Status,5
000051 936f
000052 937f
000053 938f
000054 939f
000055 2766
000056 e071
000057 9180 0060
000059 9190 0061
00005b 0f87
00005c 1f96
00005d 9380 0060
00005f 9390 0061
000061 919f
000062 918f
000063 917f
000064 916f                      	inc2bVar BWT
                                 TNext2:
                                 	;======================
000065 bf2f                      	out sreg,r18
000066 916f                      	pop SysReg1
000067 912f                      	pop r18
000068 9518                      	reti
                                 
                                 
                                 
                                 
                                 
                                 ;Init Program========================================================================================================================================================================
                                 
                                 
                                 
                                 
                                 
                                 
                                 init:
000069 2766
00006a 2777
00006b 2788
00006c 2799
00006d 2744
00006e 2755
00006f 2733
000070 e6e0
000071 e0f0
000072 e060
000073 9361
000074 e56f
000075 17e6
000076 f7d9
000077 e064
000078 17f6
000079 f7c1                      	RamErase
00007a e56f
00007b bf6d
00007c e064
00007d bf6e                      	StackSet
00007e 936f
00007f ef6f
000080 bb64
000081 916f
000082 936f
000083 e060
000084 bb65
000085 916f
000086 936f
000087 e060
000088 bb67
000089 916f
00008a 936f
00008b ef6f
00008c bb68
00008d 916f
00008e 936f
00008f ef6f
000090 bb61
000091 916f
000092 936f
000093 e060
000094 bb62
000095 916f                      	PortInit
000096 e040
000097 933f
000098 e032
000099 d0c7
00009a 913f
00009b 933f
00009c e038
00009d d0c3
00009e 913f
00009f 933f
0000a0 e03c
0000a1 d0bf
0000a2 913f
0000a3 933f
0000a4 e036
0000a5 d0bb
0000a6 913f
0000a7 933f
0000a8 e031
0000a9 d0b7
0000aa 913f
0000ab 936f
0000ac 937f
0000ad 938f
0000ae e568
0000af e072
0000b0 e080
0000b1 5061
0000b2 4070
0000b3 4080
0000b4 f7e0
0000b5 918f
0000b6 917f
0000b7 916f                      	DispInit
                                 
0000b8 936f
0000b9 e060
0000ba bb68
0000bb 916f                      	outi PORTB,0x00
0000bc 936f
0000bd ec61
0000be bb67
0000bf 916f                      	outi DDRB,0b11000001
0000c0 936f
0000c1 e061
0000c2 bf63
0000c3 916f
0000c4 936f
0000c5 e061
0000c6 bf60
0000c7 916f
0000c8 936f
0000c9 e061
0000ca bf69
0000cb 916f                      	timer0On
0000cc 9478                      	SEI
0000cd c000                      	rjmp main
                                 
                                 ;MainCycle============================================
                                 main:
                                 
0000ce 93af
0000cf 93bf
0000d0 91a0 0064
0000d2 91b0 0065
0000d4 3dac
0000d5 f040
0000d6 30b5
0000d7 f030
0000d8 27aa
0000d9 93a0 0064
0000db 93a0 0065
0000dd 6051
0000de 91bf
0000df 91af                      	displayCheck
0000e0 0000                      	EncoderCheck
0000e1 93af
0000e2 93bf
0000e3 ff53
0000e4 c008
0000e5 91a0 0060
0000e7 91b0 0061
0000e9 3fa4
0000ea f010
0000eb 30b1
0000ec f000
0000ed 91bf
0000ee 91af                      	ButtonCheck
                                 
0000ef fd50                      	sbrc Status,0
0000f0 d007                      	rcall DispRefresh
0000f1 fd51                      	sbrc Status,1
0000f2 d029                      	rcall TurnLeft
0000f3 fd52                      	sbrc Status,2
0000f4 d02d                      	rcall TurnRight
0000f5 fd53                      	sbrc Status,3
0000f6 d031                      	rcall ButtonClick
0000f7 cfd6                          rjmp main
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ;Other=======================================================================================================================================================================
                                 
                                 DispRefresh:
0000f8 b322                      	in r18,WatPort
0000f9 9523                      	inc r18
0000fa bb22                      	out WatPort,r18
                                 ;=================
0000fb 7f5e                      	andi Status,0b11111110
0000fc 933f
0000fd e031
0000fe d062
0000ff 913f                      	mDispSendComnd 0x01
000100 936f
000101 937f
000102 938f
000103 e568
000104 e072
000105 e080
000106 5061
000107 4070
000108 4080
000109 f7e0
00010a 918f
00010b 917f
00010c 916f                      	delay5 600
                                 
00010d e000                      	ldi r16,0
00010e 2f14                      	mov r17,CurrentWindow
00010f 0f11                      	lsl r17
000110 e1e3                      	ldi ZL,low(MenuList)
000111 e0f0                      	ldi ZH,high(MenuList)
000112 0fee                      	lsl ZL
000113 1fff                      	ROL ZH
000114 0fe1                      	add ZL,r17
000115 1ff0                      	adc ZH,r16
000116 91a5                      	lpm XL,Z+
000117 91b4                      	lpm XH,Z
000118 2fea                      	mov ZL,XL
000119 2ffb                      	mov ZH,XH
                                 	
00011a 9509                      	icall
00011b 9508                      	ret
                                 ;========================================================================================================================================================================
                                 TurnLeft:
00011c 7f5d                      	andi Status,0b11111101
00011d 933f
00011e e431
00011f d011
000120 913f                      	mDispSendData 'A'
000121 9508                      	ret
                                 ;========================================================================================================================================================================
                                 TurnRight:
000122 7f5b                      	andi Status,0b11111011
000123 933f
000124 e432
000125 d00b
000126 913f                      	mDispSendData 'B'
000127 9508                      	ret
                                 ;========================================================================================================================================================================
                                 ButtonClick:
000128 933f
000129 e433
00012a d006
00012b 913f                      mDispSendData 'C'
00012c 7f57                      	andi Status,0b11110111
                                 
00012d 3040                      	cpi CurrentWindow,0
00012e f409                      	brne end
00012f e041                      	ldi CurrentWindow,1
                                 end:
000130 9508                      	ret
                                 ;========================================================================================================================================================================
                                 
                                 DispSendData:
000131 936f                      	push SysReg1
                                 ;==========================================
000132 2f63                      	mov SysReg1,dispDataReg
000133 9562                      	swap SysReg1
000134 706f                      	andi SysReg1,$0F
000135 0f66                      	lsl SysReg1
000136 0f66                      	lsl SysReg1
000137 6063                      	ori SysReg1,3
000138 bb65                      	out DispPort,SysReg1
000139 0000                      	nop
00013a 7f6c                      	andi SysReg1,0b11111100
00013b bb65                      	out DispPort,SysReg1
                                 
00013c 936f
00013d 937f
00013e 938f
00013f e268
000140 e070
000141 e080
000142 5061
000143 4070
000144 4080
000145 f7e0
000146 918f
000147 917f
000148 916f                      	delay5 40
                                 
                                 
000149 2f63                      	mov SysReg1,dispDataReg
00014a 706f                      	andi SysReg1,$0F
00014b 0f66                      	lsl SysReg1
00014c 0f66                      	lsl SysReg1
00014d 6063                      	ori SysReg1,3
00014e bb65                      	out DispPort,SysReg1
00014f 0000                      	nop
000150 7f6c                      	andi SysReg1,0b11111100
000151 bb65                      	out DispPort,SysReg1
                                 
000152 936f
000153 937f
000154 938f
000155 e268
000156 e070
000157 e080
000158 5061
000159 4070
00015a 4080
00015b f7e0
00015c 918f
00015d 917f
00015e 916f                      	delay5 40
                                 ;==========================================
00015f 916f                      	pop SysReg1
000160 9508                      ret
                                 ;========================================================================================================================================================================
                                 
                                 DispSendComnd:
                                 
000161 2f63                      	mov SysReg1,dispDataReg
000162 9562                      	swap SysReg1
000163 706f                      	andi SysReg1,$0F
000164 0f66                      	lsl SysReg1
000165 0f66                      	lsl SysReg1
000166 6062                      	ori SysReg1,2
000167 bb65                      	out DispPort,SysReg1
000168 0000                      	nop
000169 7f6d                      	andi SysReg1,0b11111101
00016a bb65                      	out DispPort,SysReg1
                                 
00016b 936f
00016c 937f
00016d 938f
00016e e268
00016f e070
000170 e080
000171 5061
000172 4070
000173 4080
000174 f7e0
000175 918f
000176 917f
000177 916f                      	delay5 40
                                 
                                 
000178 2f63                      	mov SysReg1,dispDataReg
000179 706f                      	andi SysReg1,$0F
00017a 0f66                      	lsl SysReg1
00017b 0f66                      	lsl SysReg1
00017c 6062                      	ori SysReg1,2
00017d bb65                      	out DispPort,SysReg1
00017e 0000                      	nop
00017f 7f6d                      	andi SysReg1,0b11111101
000180 bb65                      	out DispPort,SysReg1
                                 
000181 936f
000182 937f
000183 938f
000184 e268
000185 e070
000186 e080
000187 5061
000188 4070
000189 4080
00018a f7e0
00018b 918f
00018c 917f
00018d 916f                      	delay5 40
00018e 9508                      ret
                                 ;========================================================================================================================================================================
                                 ShowMainMenu:
00018f 933f
000190 e43d
000191 df9f
000192 913f                      	mDispSendData 'M'
000193 933f
000194 e330
000195 df9b
000196 913f                      	mDispSendData '0'
000197 933f
000198 e43d
000199 df97
00019a 913f                      	mDispSendData 'M'
00019b 933f
00019c e331
00019d df93
00019e 913f                      	mDispSendData '1'
                                 
00019f 933f
0001a0 e43d
0001a1 df8f
0001a2 913f                      	mDispSendData 'M'
0001a3 933f
0001a4 e332
0001a5 df8b
0001a6 913f                      	mDispSendData '2'
0001a7 933f
0001a8 e43d
0001a9 df87
0001aa 913f                      	mDispSendData 'M'
0001ab 933f
0001ac e333
0001ad df83
0001ae 913f                      	mDispSendData '3'
                                 
0001af 933f
0001b0 e43d
0001b1 df7f
0001b2 913f                      	mDispSendData 'M'
0001b3 933f
0001b4 e334
0001b5 df7b
0001b6 913f                      	mDispSendData '4'
0001b7 933f
0001b8 e43d
0001b9 df77
0001ba 913f                      	mDispSendData 'M'
0001bb 933f
0001bc e335
0001bd df73
0001be 913f                      	mDispSendData '5'
                                 
0001bf 933f
0001c0 e43d
0001c1 df6f
0001c2 913f                      	mDispSendData 'M'
0001c3 933f
0001c4 e336
0001c5 df6b
0001c6 913f                      	mDispSendData '6'
                                 
                                 
                                 
0001c7 933f
0001c8 ec30
0001c9 df97
0001ca 913f                      		mDispSendComnd 0xC0
0001cb 933f
0001cc e230
0001cd df63
0001ce 913f                      		mDispSendData ' '
0001cf b330                      	in dispDataReg,WatPin
0001d0 7031                      	andi dispDataReg,0b00000001
0001d1 5d30                      	subi dispDataReg,-48
0001d2 df5e                      	rcall DispSendData
                                 
0001d3 933f
0001d4 e230
0001d5 df5b
0001d6 913f                      		mDispSendData ' '
0001d7 b330                      	in dispDataReg,WatPin
0001d8 7032                      	andi dispDataReg,0b00000010
0001d9 9536                      	lsr dispDataReg
0001da 5d30                      	subi dispDataReg,-48 
0001db df55                      	rcall DispSendData
                                 
0001dc 933f
0001dd e230
0001de df52
0001df 913f                      		mDispSendData ' '
0001e0 b330                      	in dispDataReg,WatPin
0001e1 7034                      	andi dispDataReg,0b00000100
0001e2 9536                      	lsr dispDataReg
0001e3 9536                      	lsr dispDataReg
0001e4 5d30                      	subi dispDataReg,-48 
0001e5 df4b                      	rcall DispSendData
                                 
0001e6 933f
0001e7 e230
0001e8 df48
0001e9 913f                      		mDispSendData ' '
0001ea b330                      	in dispDataReg,WatPin
0001eb 7038                      	andi dispDataReg,0b00001000
0001ec 9536                      	lsr dispDataReg
0001ed 9536                      	lsr dispDataReg
0001ee 9536                      	lsr dispDataReg
0001ef 5d30                      	subi dispDataReg,-48 
0001f0 df40                      	rcall DispSendData
                                 
0001f1 933f
0001f2 e230
0001f3 df3d
0001f4 913f                      		mDispSendData ' '
0001f5 b330                      	in dispDataReg,WatPin
0001f6 7130                      	andi dispDataReg,0b00010000
0001f7 9532                      	swap dispDataReg
0001f8 5d30                      	subi dispDataReg,-48 
0001f9 df37                      	rcall DispSendData
                                 
0001fa 933f
0001fb e230
0001fc df34
0001fd 913f                      		mDispSendData ' '
0001fe b330                      	in dispDataReg,WatPin
0001ff 7230                      	andi dispDataReg,0b00100000
000200 9532                      	swap dispDataReg
000201 9536                      	lsr dispDataReg
000202 5d30                      	subi dispDataReg,-48 
000203 df2d                      	rcall DispSendData
000204 933f
000205 e230
000206 df2a
000207 913f                      		mDispSendData ' '
000208 b330                      	in dispDataReg,WatPin
000209 7430                      	andi dispDataReg,0b01000000
00020a 9532                      	swap dispDataReg
00020b 9536                      	lsr dispDataReg
00020c 9536                      	lsr dispDataReg
00020d 5d30                      	subi dispDataReg,-48 
00020e df22                      	rcall DispSendData
                                  
00020f 9508                      	ret
                                 ;========================================================================================================================================================================
                                 
                                 ShowSetMenu:
000210 933f
000211 e43c
000212 df1e
000213 913f                      mDispSendData 'L'
000214 933f
000215 e331
000216 df1a
000217 913f                      mDispSendData '1'
000218 9508                      	ret
                                 ;========================================================================================================================================================================
                                 ShowM0:
                                 
000219 9508                      	ret
                                 ;========================================================================================================================================================================
                                 ShowM1:
                                 
00021a 9508                      	ret
                                 ;========================================================================================================================================================================
                                 ShowM2:
                                 
00021b 9508                      	ret
                                 ;========================================================================================================================================================================
                                 ShowM3:
                                 
00021c 9508                      	ret
                                 ;========================================================================================================================================================================
                                 ShowM4:
00021d 9508                      	ret
                                 ;========================================================================================================================================================================
                                 ShowM5:
                                 	
00021e 9508                      	ret
                                 ;========================================================================================================================================================================
                                 ShowM6:
                                 	
00021f 9508                      	ret
                                 ;========================================================================================================================================================================
                                 ShowM7:
                                 
000220 9508                      	ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega8A" register use summary:
x  :   0 y  :   0 z  :   3 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:   2 r17:   3 r18:   9 r19: 137 r20:   5 
r21:  14 r22: 133 r23:  37 r24:  40 r25:  16 r26:  13 r27:  10 r28:   0 
r29:   0 r30:   6 r31:   6 
Registers used: 15 out of 35 (42.9%)

"ATmega8A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   4 add   :   4 adiw  :   0 and   :   0 
andi  :  21 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   6 brcs  :   4 breq  :   2 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :   3 
brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   0 cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 
cli   :   0 cln   :   0 clr   :  11 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   2 cpc   :   0 cpi   :   5 cpse  :   0 
dec   :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 
ijmp  :   0 in    :   9 inc   :   1 ld    :   0 ldd   :   0 ldi   :  78 
lds   :  10 lpm   :   3 lsl   :  10 lsr   :   9 mov   :   9 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   5 or    :   0 
ori   :   5 out   :  24 pop   :  81 push  :  81 rcall :  44 ret   :  16 
reti  :  18 rjmp  :   5 rol   :   1 ror   :   0 sbc   :   0 sbci  :  12 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   5 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   1 std   :   0 sts   :   8 sub   :   0 subi  :  13 swap  :   5 
tst   :   0 wdr   :   0 
Instructions used: 37 out of 110 (33.6%)

"ATmega8A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000442   1070     20   1090    8192  13.3%
[.dseg] 0x000060 0x000066      0      6      6    1024   0.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
