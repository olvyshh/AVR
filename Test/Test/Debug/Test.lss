
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000100  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000051d  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ac  00000000  00000000  000006a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000016a  00000000  00000000  00000b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a8  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003b  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000fd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	21 c0       	rjmp	.+66     	; 0x88 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:

#include <avr/io.h>
volatile int i=0;

int main(void)
{
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	cd b7       	in	r28, 0x3d	; 61
  4e:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
    while (1) 
    {
		i++;
  50:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  54:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  58:	01 96       	adiw	r24, 0x01	; 1
  5a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  5e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		i++;
  62:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  66:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  6a:	01 96       	adiw	r24, 0x01	; 1
  6c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  70:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
				i++;		
  74:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  78:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  82:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>


    }
  86:	e4 cf       	rjmp	.-56     	; 0x50 <main+0x8>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
